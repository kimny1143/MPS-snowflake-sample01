name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff black pytest pytest-cov
    
    - name: Run linters
      run: |
        ruff check src/ app/ || true
        black --check src/ app/ || true
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml || true
      continue-on-error: true
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  deploy-snowflake:
    name: Deploy to Snowflake
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Snowflake CLI
      run: |
        pip install snowflake-cli-labs
    
    - name: Deploy database objects
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        SNOWFLAKE_DATABASE: MUED
        SNOWFLAKE_SCHEMA: PUBLIC
      run: |
        # Create temporary connection config
        cat > ~/.snowflake/config.toml << EOF
        [connections.default]
        account = "$SNOWFLAKE_ACCOUNT"
        user = "$SNOWFLAKE_USER"
        password = "$SNOWFLAKE_PASSWORD"
        role = "$SNOWFLAKE_ROLE"
        warehouse = "$SNOWFLAKE_WAREHOUSE"
        database = "$SNOWFLAKE_DATABASE"
        schema = "$SNOWFLAKE_SCHEMA"
        EOF
        
        # Deploy SQL scripts
        snow sql -f snowflake/setup.sql || true
        snow sql -f snowflake/embeddings.sql || true
        
        # Resume tasks
        snow sql -q "ALTER TASK CORE.MERGE_BLOG_POSTS_TASK RESUME" || true
    
    - name: Clean up
      if: always()
      run: |
        rm -rf ~/.snowflake/config.toml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'